#
# }
# if('Hydro' %in% input$source1)
# {
#
#   leafletProxy("map1") %>%
#     #Hydro
#     addCircleMarkers(markersBySources[[7]]$LON, markersBySources[[7]]$LAT,
#                      layerId=paste(markersBySources[[7]]$PLGENAHY),
#                      popup = paste(sep = "<br/>",paste("<b>","Hydro Generation",markersBySources[[7]]$PLGENAHY,"</b>")),
#                      fillOpacity = opacity,
#                      color= hyColor)
#
# }
# if('Wind' %in% input$source1)
# {
#
#   leafletProxy("map1") %>%
#     #Wind markers
#     addCircleMarkers(markersBySources[[6]]$LON, markersBySources[[6]]$LAT,
#                      layerId=paste(markersBySources[[6]]$PLGENAWI),
#                      popup = paste(sep = "<br/>",paste("<b>","Wind Generation",markersBySources[[6]]$PLGENAWI,"</b>")),
#                      fillOpacity = opacity,
#                      color= wiColor)
#
# }
# if('Solar' %in% input$source1)
# {
#
#   leafletProxy("map1") %>%
#     #Solar
#     addCircleMarkers(markersBySources[[8]]$LON, markersBySources[[8]]$LAT,
#                      layerId=paste(markersBySources[[8]]$PLGENASO),
#                      popup = paste(sep = "<br/>",paste("<b>","Solar Generation",markersBySources[[8]]$PLGENASO,"</b>")),
#                      fillOpacity = opacity,
#                      color= soColor)
#
# }
# if('Biomass' %in% input$source1)
# {
#
#   leafletProxy("map1") %>%
#     #Biomass
#     addCircleMarkers(markersBySources[[9]]$LON, markersBySources[[9]]$LAT,
#                      layerId=paste(markersBySources[[9]]$PLGENABM),
#                      popup = paste(sep = "<br/>",paste("<b>","Biomass=",markersBySources[[9]]$PLGENABM,"</b>")),
#                      fillOpacity = opacity,
#                      color= bmColor)
#
# }
# if('Geothermal' %in% input$source1)
# {
#
#   leafletProxy("map1") %>%
#     #Geothermal
#     addCircleMarkers(markersBySources[[10]]$LON, markersBySources[[10]]$LAT,
#                      layerId=paste(markersBySources[[10]]$PLGENAGT),
#                      popup = paste(sep = "<br/>",paste("<b>","GeoThermal Generation",markersBySources[[10]]$PLGENAGT,"</b>")),
#                      fillOpacity = opacity,
#                      color= gtColor)
#
# }
#---
#   if('Non-Renewables' %in% input$source1)
#   {
#     leafletProxy("map1") %>%
#     #Wind markers
#     addCircleMarkers(markersBySources[[6]]$LON, markersBySources[[6]]$LAT,
#                      layerId=paste(markersBySources[[6]]$PLGENAWI),
#                      popup = paste(sep = "<br/>",paste("<b>","Wind Generation",markersBySources[[6]]$PLGENAWI,"</b>")),
#                      fillOpacity = opacity,
#                      color= wiColor) %>%
#
#       #Hydro
#       addCircleMarkers(markersBySources[[7]]$LON, markersBySources[[7]]$LAT,
#                        layerId=paste(markersBySources[[7]]$PLGENAHY),
#                        popup = paste(sep = "<br/>",paste("<b>","Hydro Generation",markersBySources[[7]]$PLGENAHY,"</b>")),
#                        fillOpacity = opacity,
#                        color= hyColor) %>%
#
#       #Solar
#       addCircleMarkers(markersBySources[[8]]$LON, markersBySources[[8]]$LAT,
#                        layerId=paste(markersBySources[[8]]$PLGENASO),
#                        popup = paste(sep = "<br/>",paste("<b>","Solar Generation",markersBySources[[8]]$PLGENASO,"</b>")),
#                        fillOpacity = opacity,
#                        color= soColor) %>%
#
#       #Biomass
#       addCircleMarkers(markersBySources[[9]]$LON, markersBySources[[9]]$LAT,
#                        layerId=paste(markersBySources[[9]]$PLGENABM),
#                        popup = paste(sep = "<br/>",paste("<b>","Biomass=",markersBySources[[9]]$PLGENABM,"</b>")),
#                        fillOpacity = opacity,
#                        color= bmColor) %>%
#
#       #Geothermal
#       addCircleMarkers(markersBySources[[10]]$LON, markersBySources[[10]]$LAT,
#                        layerId=paste(markersBySources[[10]]$PLGENAGT),
#                        popup = paste(sep = "<br/>",paste("<b>","GeoThermal Generation",markersBySources[[10]]$PLGENAGT,"</b>")),
#                        fillOpacity = opacity,
#                        color= gtColor)
#
#   }
#   if('Renewables' %in% input$source1)
#   {
#
#     proxy %>%
#       #Coal markers
#       addCircleMarkers(markersBySources[[1]]$LON, markersBySources[[1]]$LAT,
#                        layerId=paste(markersBySources[[1]]$PLGENACL),
#                        popup = paste(sep = "<br/>",paste("<b>","Coal Generation",markersBySources[[1]]$PLGENACL,"</b>")),
#                        fillOpacity = opacity,
#                        color= coColor) %>%
#
#       #Oil markers
#       addCircleMarkers(markersBySources[[2]]$LON, markersBySources[[2]]$LAT,
#                        layerId=paste(markersBySources[[2]]$PLGENAOL),
#                        popup = paste(sep = "<br/>",paste("<b>","Oil Generation=",markersBySources[[2]]$PLGENAOL,"</b>")),
#                        fillOpacity = opacity,
#                        color= oilColor) %>%
#
#       #Gas markers
#       addCircleMarkers(markersBySources[[3]]$LON, markersBySources[[3]]$LAT,
#                        layerId=paste(markersBySources[[3]]$PLGENAGS),
#                        popup = paste(sep = "<br/>",paste("<b>","Gas Generation=",markersBySources[[3]]$PLGENAGS,"</b>")),
#                        fillOpacity = opacity,
#                        color= gasColor) %>%
#
#       #Nuclear markers
#       addCircleMarkers(markersBySources[[4]]$LON, markersBySources[[4]]$LAT,
#                        layerId=paste(markersBySources[[4]]$PLGENANC),
#                        popup = paste(sep = "<br/>",paste("<b>","Nuclear Generation=",markersBySources[[4]]$PLGENANC,"</b>")),
#                        fillOpacity = opacity,
#                        color= nuColor) %>%
#
#       #Other markers
#       addCircleMarkers(markersBySources[[5]]$LON, markersBySources[[5]]$LAT,
#                        layerId=paste(markersBySources[[5]]$PLGENAOF),
#                        popup = paste(sep = "<br/>",paste("<b>","Other Generation",markersBySources[[5]]$PLGENAOF,"</b>")),
#                        fillOpacity = opacity,
#                        color= otColor)
#
#   }
#   else
#   {
#     leafletProxy("map1") %>% clearMarkers() %>%
#       addTiles() %>%  # Add default OpenStreetMap map tiles
#       setView(lng=-87.623, lat=41.881,zoom=5) %>%
#       addResetMapButton()%>%
#       addProviderTiles(providers$OpenTopoMap, group = "Topo") %>%
#       addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
#       # Layers control
#       addLayersControl(
#         baseGroups = c("OSM (default)", "Topo", "Toner Lite"),
#         #overlayGroups = c("Quakes", "Outline"),
#         options = layersControlOptions(collapsed = FALSE))
#
#   }#end of else
# })#end of observe Event
# Use a separate observer to recreate the legend as needed.
# observe({
#  proxy <- leafletProxy("map", data = illData)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
# proxy %>% clearControls()
#if (input$legend) {
# proxy %>% addLegend(position = "bottomright")
#}
#})
#===============================================================
#TAB2 code
#===============================================================
#comparison Maps Render initial maps and then use leaflet proxy to addMarkers
#for optimization
#setup observe for checkbox inputs on TAB2
observe({
updateCheckboxGroupInput(
session, 'map2source',choices = sources,
selected = if(input$allmap2) sources
)
})
#setup observe for checkbox inouts
observe({
updateCheckboxGroupInput(
session, 'map2source',choices = sources,
selected = if(input$allmap2R) sources[1:5]
)
})
#setup observe for checkbox inouts
observe({
updateCheckboxGroupInput(
session, 'map2source',choices = sources,
selected = if(input$allmap2NR) sources[6:10]
)
})
#setup observe for SECOND checkbox inputs for map3
observe({
updateCheckboxGroupInput(
session, 'map3source',choices = sources,
selected = if(input$allmap3) sources
)
})
#setup observe for check box inputs
observe({
updateCheckboxGroupInput(
session, 'map3source',choices = sources,
selected = if(input$allmap3R) sources[1:5]
)
})
#setup observe for check box inputs
observe({
updateCheckboxGroupInput(
session, 'map3source',choices = sources,
selected = if(input$allmap3NR) sources[6:10]
)
})
#-------------
#TAB 2 OUTPUTS
#-------------
#input$state1 & input$year1
# state.abb[input$state1] to get the abbreviations from the input values
#tstate<-reactive({input$state1})
#map1 reactive is dependent upon input$map2source & input$year1 &input$state1
map2dataset<- reactive({
#first filter dataset by Year
if(input$year1==2000)
{
tdata<-d2
tdata<-subset(tdata,tdata$PSTATABB==input$state1)
}
else if(input$year1==2010)
{
tdata<-d3
tdata<-subset(tdata,tdata$PSTATABB==input$state1)
}
else
{
tdata<-d1
tdata<-subset(tdata,tdata$PSTATABB==input$state1)
}
#then subset dataset according to the State
#use function statetoabbr to convert to state abbreviations- may need state2abbr("Illinois")
#tdata<-subset(tdata,tdata$PSTATABB==(state2abbr(input$state1)))
tdata
})
#reactive for map3
map3dataset<- reactive({
#first filter dataset by Year
if(input$year2==2000)
{
tdata<-d2
tdata<-subset(tdata,tdata$PSTATABB==input$state2)
}
else if(input$year2==2010)
{
tdata<-d3
tdata<-subset(tdata,tdata$PSTATABB==input$state2)
}
else
{
tdata<-d1
tdata<-subset(tdata,tdata$PSTATABB==input$state2)
}
#then subset dataset according to the State
#use function statetoabbr to convert to state abbreviations- may need state2abbr("Illinois")
#tdata<-subset(tdata,tdata$PSTATABB==(state2abbr(input$state1)))
tdata
})
output$map2 <- renderLeaflet({
#initially show plants for IL in 2000
#t1<-subset(d3,d3$PSTATABB=="IL")
#tempdata<-map2reactive()
leaflet(data=map2dataset(),width = "50%") %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
# addMarkers(lng=-87.623, lat=41.881, popup="The birthplace of R") %>%
setView(lng=-87.623, lat=41.881,zoom=5) %>%
addResetMapButton()%>%
addProviderTiles(providers$OpenTopoMap, group = "Topo") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Topo", "Toner Lite"),
# overlayGroups = c("sources"),
options = layersControlOptions(collapsed = TRUE)) %>%
addLegend(position = "bottomright",pal=pal, values=sources,
title = "Energy Sources")%>%
#addMarkers
addCircleMarkers(lng=~as.numeric(LON), lat=~as.numeric(LAT), color=~pal(sources),
# addCircles(lng=~as.numeric(LON), lat=~as.numeric(LAT), radius = ~sqrt(t1$PLNGENAN),
radius =~sqrt(map2dataset()$PLNGENAN/100000),
#layerId=paste(PLNGENAN),
popup = paste("<b>","Plant Name:", map2dataset()$PNAME,
#"<br>Total Generation",PLNGENAN,
# "<br>Percent Renewable:",PLTRPR,
"<br>Percent Non-renewable:",map2dataset()$PLTNPR,"</b>"),
#stroke=FALSE,
fillOpacity = 0.5,
clusterOptions=markerClusterOptions(maxClusterRadius = 50))%>%
clearBounds()
})
observe({
leafletProxy("map2", data=map2dataset()) %>%
clearShapes()%>%
#addMarkers
addCircleMarkers(lng=~as.numeric(LON), lat=~as.numeric(LAT), color=~pal(sources),
# addCircles(lng=~as.numeric(LON), lat=~as.numeric(LAT), radius = ~sqrt(t1$PLNGENAN),
radius =~sqrt(map2dataset()$PLNGENAN/100000),
#layerId=paste(PLNGENAN),
popup = paste("<b>","Plant Name:", map2dataset()$PNAME,
"<br>Total Generation",map2dataset()$PLNGENAN,
"<br>Percent Renewable:",map2dataset()$PLTRPR,
"<br>Percent Non-renewable:",map2dataset()$PLTNPR,"</b>"),
#stroke=FALSE,
fillOpacity = 0.5)
# clusterOptions=markerClusterOptions())
}) #end of observe
#comparison Map2
output$map3 <- renderLeaflet({
#the right should show the location of the plants in Illinois in 2018 (as in the part above)
leaflet(data=map3dataset(),width = "50%") %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
# addMarkers(lng=-87.623, lat=41.881, popup="The birthplace of R") %>%
setView(lng=-87.623, lat=41.881,zoom=5) %>%
addResetMapButton()%>%
addProviderTiles(providers$OpenTopoMap, group = "Topo") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Topo", "Toner Lite"),
#overlayGroups = c("Renewables", "Non-renewables"),
options = layersControlOptions(collapsed = TRUE)) %>%
addLegend(position = "bottomright", pal=pal, values=sources,
title = "Energy Sources") %>%
#addMarkers
addCircleMarkers(lng=~as.numeric(LON), lat=~as.numeric(LAT), color=~pal(sources),
# addCircles(lng=~as.numeric(LON), lat=~as.numeric(LAT), radius = ~sqrt(t1$PLNGENAN),
radius =~sqrt(map3dataset()$PLNGENAN/100000),
#layerId=paste(PLNGENAN),
popup = paste("<b>","Plant Name:", map3dataset()$PNAME,
"<br>Total Generation",map3dataset()$PLNGENAN,
"<br>Percent Renewable:",map3dataset()$PLTRPR,
"<br>Percent Non-renewable:",map3dataset()$PLTNPR,"</b>"),
#stroke=FALSE,
fillOpacity = 0.5,
clusterOptions=markerClusterOptions(maxClusterRadius = 50)) %>%
clearBounds()
})
#TAB 3 OUTPUTS
#-------------
#setup observe for checkbox inputs
observe({
updateCheckboxGroupInput(
session, 'mapUSsource',choices = sources,
selected = if(input$allmapUS) sources
)
})
#setup observe for checkbox inouts
observe({
updateCheckboxGroupInput(
session, 'mapUSsource',choices = sources,
selected = if(input$allmapR) sources[1:5]
)
})
#setup observe for checkbox inouts
observe({
updateCheckboxGroupInput(
session, 'mapUSsource',choices = sources,
selected = if(input$allmapNR) sources[6:10]
)
})
#======================================
#TAB 3: US DATA
#======================================
#set up reactive for ALL US
#map1 reactive is dependent upon input$map2source & input$year1 &input$state1
mapUSdata<- reactive({
#first filter dataset by Year
if(input$yearUS==2000)
{
tdata<-d2
}
else if(input$year1==2010)
{
tdata<-d3
#tdata<-subset(allUS,allUS$YEAR==input$yearUS)
}
else
{
tdata<-d1
#tdata<-subset(tdata,tdata$YEAR==2018)
}
#then subset dataset according to the State
#use function statetoabbr to convert to state abbreviations- may need state2abbr("Illinois")
#tdata<-subset(tdata,tdata$PSTATABB==(state2abbr(input$state1)))
tdata
})
output$mapUS <- renderLeaflet({
leaflet(data=mapUSdata(),width = "50%") %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
# addMarkers(lng=-87.623, lat=41.881, popup="The birthplace of R") %>%
setView(lng=-87.623, lat=41.881,zoom=5) %>%
addResetMapButton()%>%
addProviderTiles(providers$OpenTopoMap, group = "Topo") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Topo", "Toner Lite"),
#overlayGroups = c("Renewables", "Non-renewables"),
options = layersControlOptions(collapsed = FALSE)) %>%
setView(lng = mean(map2dataset()$LON), lat = mean(map2dataset()$LAT), zoom = 3) %>%
addCircleMarkers(lng=~as.numeric(LON), lat=~as.numeric(LAT), color=~pal(sources),
# addCircles(lng=~as.numeric(LON), lat=~as.numeric(LAT), radius = ~sqrt(t1$PLNGENAN),
radius =~ifelse((mapUSdata()$PLNGENAN< mean(mapUSdata()$PLNGENAN)),2,6),
#layerId=paste(PLNGENAN),
popup = paste("<b>","Plant Name:", mapUSdata()$PNAME,
"<br>Total Generation",mapUSdata()$PLNGENAN,
"<br>Percent Renewable:",mapUSdata()$PLTRPR,
"<br>Percent Non-renewable:",mapUSdata()$PLTNPR,"</b>"),
#stroke=FALSE,
fillOpacity = 0.5,
clusterOptions=markerClusterOptions(maxClusterRadius = 50)
) %>%
addLegend(position = "bottomright",pal=pal, values=sources,
title = "Energy Sources")
})
# observe({
#
#     # addLegend(position = "bottomleft", pal=pal, values=sources,
#     #           title = "Energy Sources") %>%
#     #addMarkers
#
#     leafletProxy(mapUS,data = mapUSdata) %>%
#       addCircleMarkers(lng=~as.numeric(LON), lat=~as.numeric(LAT), color=~pal(sources),
#                      # addCircles(lng=~as.numeric(LON), lat=~as.numeric(LAT), radius = ~sqrt(t1$PLNGENAN),
#                      radius =~sqrt(map2dataset()$PLNGENAN/100000),
#                      #layerId=paste(PLNGENAN),
#                      popup = paste("<b>","Plant Name:", map2dataset()$PNAME,
#                                    #"<br>Total Generation",PLNGENAN,
#                                    # "<br>Percent Renewable:",PLTRPR,
#                                    "<br>Percent Non-renewable:",map2dataset()$PLTNPR,"</b>"),
#                      #stroke=FALSE,
#                      fillOpacity = 0.5)
#   # clusterOptions=markerClusterOptions())
#
# })
#================================
#Output for About page
#===============================
#final print out for about page
output$AboutOut <- renderText({
"Created by: Rabia Ibtasar\n
Final Version: 3/13/2021\n
Data Source:The original data is available from https://www.epa.gov/egrid/download-dat\n
What is this application for?\n
<p>         This interactive application has been designed to allow visitors to
visualize the change in America's energy sources over time. It provides data on multiple years(2000,2010,2018) and
provides information for all 50 states. Site visitors are able to see the changing trend in the US for renewable and non-renewable
energy sources over time.
This applicaiton can be helpful in understanding how US energy production has grown and what energy sources have become important.</p>"
})
}#server end
shinyApp(ui = ui, server = server)
View(d1)
View(d2)
runApp()
runApp()
runApp()
max(d1$PLNGENAN)
max(d2$PLNGENAN)
max(d3$PLNGENAN)
runApp()
d1%>% filter(0<d1$PLNGENAN<16000000)
d1%>% filter(0<=d1$PLNGENAN<=16000000)
d1%>% filter(0<=d1$PLNGENAN & di$PLNGENAN<=16000000)
d1%>% filter(0<=d1$PLNGENAN & d1$PLNGENAN<=16000000)
d1%>% filter(0<=d1$PLNGENAN & d1$PLNGENAN<=16000000) select(d1$LON,d1$LAT)
d1%>% filter(0<=d1$PLNGENAN & d1$PLNGENAN<=16000000) %>% select(d1$LON,d1$LAT)
runApp()
runApp()
View(d1)
runApp()
View(d2)
runApp()
runApp()
runApp()
runApp()
runApp()
rbind(d1,d2)
f<-rbind(d1,d2)
f
runApp()
runApp()
runApp()
runApp()
View(allUS)
View(d1)
View(d2)
!(d2$ORISPL %in% d1$ORISPL)
d2[!(d2$ORISPL %in% d1$ORISPL),]
d2[!(d2$ORISPL %in% d1$ORISPL),c(LAT,LON)]
d2[!(d2$ORISPL %in% d1$ORISPL),select(LAT,LON)]
d2[!(d2$ORISPL %in% d1$ORISPL),]
d1[!(d1$ORISPL %in% d2$ORISPL),]
d2[!(d2$ORISPL %in% d3$ORISPL),]
d3[!(d2$ORISPL %in% d3$ORISPL),]
d2[!(d2$ORISPL %in% d3$ORISPL),]
runApp()
runApp()
runApp()
d3[!(d2$ORISPL %in% d3$ORISPL),]
d2[!(d2$ORISPL %in% d3$ORISPL),]
runApp()
runApp()
